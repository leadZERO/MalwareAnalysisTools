import configparser
import itertools
import json
import os
import os.path

import requests

from pyti import mwrepo

from virus_total_apis import PrivateApi, IntelApi


def main():
	config = configparser.ConfigParser()

	if os.path.isfile(os.path.expanduser('~/.pyti')):
		config.read(os.path.expanduser('~/.pyti'))

	vv = PrivateApi(config['VTi']['apikey'])

	notes = vv.get_file_feed()

	print()

	notesToRemote = list()

	cveNotes = list(s['id'] for s in notes['notifications'] if 'CVE-2017-0199' in s['ruleset_name'] and s['type'] not in ['Email', 'Rich Text Format'])
	yaraNotes = list(s['id'] for s in notes['notifications'] if 'Yara Sigs' in s['ruleset_name'] and s['type'] == 'TAR')
	notesToRemove = list(itertools.chain(cveNotes, yaraNotes))
	vv.removenotifications(notesToRemove)

	len(notesToRemove)

	ss = list(s['ruleset_name'] for s in notes['notifications'])

	dd = dict()
	for s in ss:
		if s in dd:
			dd[s] = dd[s] + 1
		else:
			dd[s] = 1

	print(dd)

	mwr = mwrepo.mwrepo(config['MalwareRepo']['basePath'])

	toDownload = list({s['sha1'] for s in notes['notifications'] if s['id'] not in notesToRemove and not mwr.sha1exists(s['sha1'])})
	print(len(toDownload))
	downs = vv.downloadhashlist(toDownload)
	for d in downs:
		mwr.savefile(downs[d]['content'])
	vv.removenotifications(list(s['id'] for s in notes['notifications']))
	print(list(s['sha1'] for s in notes['notifications'] if 'Yara' in s['ruleset_name']))


if __name__ == '__main__':
	main()
