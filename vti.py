import configparser
import os
import os.path

from pyti import mwrepo
from virus_total_apis import PrivateApi, IntelApi
from itertools import groupby


def get_all_notifications(intelApi):
	if not intelApi:
		raise "No API provided"

	(next_page, r) = intelApi.get_intel_notifications_feed()

	if not r.ok or not r.json() or len(r.json()['notifications']) == 0:
		return list()

	results = r.json()['notifications']

	while next_page is not None:
		(next_page, r) = intelApi.get_intel_notifications_feed(page=next_page)
		results = results + r.json()['notifications']

	return results


def delete_intel_notifications(intelApi, ids):
	if not intelApi:
		raise "No API provided"

	while len(ids) > 0:
		qn = ids[0:101]
		ono = ids[101:]

		resp = intelApi.delete_intel_notifications(ids)

		if type(resp) == 'dict' or not resp.ok:
			raise "Error deleting notes"
		ids = ono


def printNoteSummary(label, nnn):
	print('Summary of notifications ({}):'.format(label))

	keyFunc = lambda f: f['type']
	for rsName, samples in nnn:
		samples = list(samples)
		print("Ruleset {}: {}".format(rsName, len(samples)))
		for sType, tSamps in groupby(sorted(samples, key=keyFunc), key=keyFunc):
			print("... {}: {}".format(sType, len(list(tSamps))))


def main():
	config = configparser.ConfigParser()

	if os.path.isfile(os.path.expanduser('~/.pyti')):
		config.read(os.path.expanduser('~/.pyti'))

	intelApi = IntelApi(config['VTi']['apikey'])
	privApi = PrivateApi(config['VTi']['apikey'])

	allNotes = get_all_notifications(intelApi)

	keyFunc = lambda f: f['ruleset_name']

	dedup = list()
	dedupHash = list()

	for s in allNotes:
		if s['sha1'] not in dedupHash:
			dedup.append(s)
			dedupHash.append(s['sha1'])

	mwr = mwrepo.mwrepo(config['MalwareRepo']['basePath'])

	toDownload = [s for s in dedup if not mwr.sha1exists(s['sha1'])]
	printNoteSummary('To Download', groupby(sorted(toDownload, key=keyFunc), key=keyFunc))

	print('Downloading {} files...'.format(len(toDownload)))

	ind = 0
	errors = list()

	for s in toDownload:
		print('... ({}/{}): {} '.format(ind+1, len(toDownload), s['sha1']), end='')

		ss = privApi.get_file(s['sha1'])

		if type(ss) == dict:
			print('= Error: {}'.format(ss['error']), end='')
			errors.append(s['sha1'])
		else:
			mwr.savefile(ss)

		print()
		ind = ind+1

	idsToRemove = list(set([s['id'] for s in allNotes if s['sha1'] not in errors]))

	delete_intel_notifications(intelApi, idsToRemove)


if __name__ == '__main__':
	main()
