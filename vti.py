import configparser
import hashlib
import os
import os.path

# import re
import requests
import json
import itertools


class mwrepo:
	basePath = ''

	def __init__(self, basePath):
		if not os.path.exists(basePath):
			raise 'Bad path'
		self.basePath = basePath

	def sha1Exists(self, sha1):
		return os.path.isfile(os.path.join(self.basePath, sha1))

	def contentExists(self, content):
		sha1 = hashlib.sha1(content).hexdigest()
		return os.path.isfile(os.path.join(self.basePath, sha1))

	def saveFile(self, content):
		sha1 = hashlib.sha1(content).hexdigest()

		with open(os.path.join(self.basePath, sha1), 'wb') as f:
			f.write(content)


class vtapiv2:
	apikey = ''

	headers = {
		'Accept-Encoding': 'gzip, deflate',
		'User-Agent': 'vtapi-cli'
	}

	def __init__(self, apikey):
		self.apikey = apikey

	def GetFileReport(self, resource):
		params = {'apikey': self.apikey, 'resource': resource}

		response = requests.get(
			'https://www.virustotal.com/vtapi/v2/file/report',
			params=params, headers=self.headers
		)

		if response is None:
			return None
		elif not response.ok:
			return response.status_code
		return response.json()

	def GetFileBehaviour(self, hash):
		params = {'apikey': self.apikey, 'hash': hash}

		response = requests.get(
			'https://www.virustotal.com/vtapi/v2/file/report',
			params=params, headers=self.headers
		)

		if response is None:
			return None
		elif not response.ok:
			return response.status_code

		return response.json()

	def DownloadFile(self, hash):
		params = {'apikey': self.apikey, 'hash': hash}
		response = requests.get(
			'https://www.virustotal.com/vtapi/v2/file/download',
			params=params, headers=self.headers
		)

		if response is None:
			return None
		elif not response.ok:
			return response.status_code

		return response.content

# def GetNotifications(self, output):
# params = {'apikey': self.apikey, }


class VTi:
	apikey = ''

	def __init__(self, apikey):
		self.apikey = apikey

	def getNotifications(self):
		print("Requesting notification feed...")

		req = requests.request(
			'GET',
			'https://www.virustotal.com/intelligence/hunting/notifications-feed/?key=' + self.apikey + '&output=json'
		)
		if req.ok:
			reqJson = json.loads(req.content)
			print("...Success " + str(len(reqJson['notifications'])))
			return reqJson
		else:
			print("...Failure")
			return None

	def removeNotifications(self, noteIds):
		if len(noteIds) == 0:
			return

		header = {'Content-Type': 'application/json'}

		while len(noteIds) > 0:
			qn = noteIds[0:101]
			ono = noteIds[101:]

			print("Removing " + str(len(qn)) + " notifications")
			print("Left to do " + str(len(ono)))

			r = requests.request(
				'POST',
				'https://www.virustotal.com/intelligence/hunting/delete-notifications/programmatic/?key=' + self.apikey,
				json=qn,
				headers=header
			)

			print('Request Status... ' + str(r.status_code))

			if r.ok:
				noteIds = ono

		return noteIds

	def downloadHashList(self, hashes):
		if len(hashes) == 0:
			return

		content = dict()
		print("Requesting...")

		ii = 1

		for hash in hashes:
			c = dict()

			r = requests.request(
				'GET',
				'https://www.virustotal.com/vtapi/v2/file/download?hash=' + hash + '&key=' + self.apikey
			)
			print("... (" + str(ii) + "/" + str(len(hashes)) + "): " + hash + ': ' + str(r.status_code))

			ii = ii + 1

			c['hash'] = hash
			c['status'] = r.status_code

			if r.ok:
				c['content'] = r.content

			content[hash] = c

		return content


def main():
	config = configparser.ConfigParser()

	if os.path.isfile(os.path.expanduser('~/.pyti')):
		config.read(os.path.expanduser('~/.pyti'))

	vv = VTi(config['VTi']['apikey'])

	notes = vv.getNotifications()
	notesToRemote = list()

	cveNotes = list(s['id'] for s in notes['notifications'] if 'CVE-2017-0199' in s['ruleset_name'] and s['type'] not in ['Email', 'Rich Text Format'])
	yaraNotes = list(s['id'] for s in notes['notifications'] if 'Yara Sigs' in s['ruleset_name'] and s['type'] == 'TAR')
	notesToRemove = list(itertools.chain(cveNotes, yaraNotes))
	vv.removeNotifications(notesToRemove)

	len(notesToRemove)

	ss = list(s['ruleset_name'] for s in notes['notifications'])

	dd = dict()
	for s in ss:
		if s in dd:
			dd[s] = dd[s] + 1
		else:
			dd[s] = 1

	print(dd)

	mwr = mwrepo(config['MalwareRepo']['basePath'])

	toDownload = list({s['sha1'] for s in notes['notifications'] if s['id'] not in notesToRemove and not mwr.sha1Exists(s['sha1'])})
	print(len(toDownload))
	downs = vv.downloadHashList(toDownload)
	for d in downs:
		mwr.saveFile(downs[d]['content'])
	vv.removeNotifications(list(s['id'] for s in notes['notifications']))
	print(list(s['sha1'] for s in notes['notifications'] if 'Yara' in s['ruleset_name']))


if __name__ == '__main__':
	main()
